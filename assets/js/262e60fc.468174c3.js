"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8320],{54951:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var o=t(85893),i=t(11151);const a={custom_edit_url:"https://github.com/microsoft/autogen/edit/main/website/docs/topics/non-openai-models/cloud-anthropic.ipynb",description:"Define and load a custom model",source_notebook:"/website/docs/topics/non-openai-models/cloud-anthropic.ipynb",tags:["custom model"],title:"Anthropic Claude"},s="Anthropic Claude",r={id:"topics/non-openai-models/cloud-anthropic",title:"Anthropic Claude",description:"Define and load a custom model",source:"@site/docs/topics/non-openai-models/cloud-anthropic.mdx",sourceDirName:"topics/non-openai-models",slug:"/topics/non-openai-models/cloud-anthropic",permalink:"/autogen/docs/topics/non-openai-models/cloud-anthropic",draft:!1,unlisted:!1,editUrl:"https://github.com/microsoft/autogen/edit/main/website/docs/topics/non-openai-models/cloud-anthropic.ipynb",tags:[{label:"custom model",permalink:"/autogen/docs/tags/custom-model"}],version:"current",frontMatter:{custom_edit_url:"https://github.com/microsoft/autogen/edit/main/website/docs/topics/non-openai-models/cloud-anthropic.ipynb",description:"Define and load a custom model",source_notebook:"/website/docs/topics/non-openai-models/cloud-anthropic.ipynb",tags:["custom model"],title:"Anthropic Claude"},sidebar:"docsSidebar",previous:{title:"Tips for Non-OpenAI Models",permalink:"/autogen/docs/topics/non-openai-models/best-tips-for-nonopenai-models"},next:{title:"Using Gemini in AutoGen with Other LLMs",permalink:"/autogen/docs/topics/non-openai-models/cloud-gemini"}},c={},l=[{value:"Features",id:"features",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Set the config for the Anthropic API",id:"set-the-config-for-the-anthropic-api",level:2},{value:"Alternative",id:"alternative",level:3},{value:"Construct Agents",id:"construct-agents",level:2},{value:"Initiate Chat",id:"initiate-chat",level:2},{value:"Register the function",id:"register-the-function",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"anthropic-claude",children:"Anthropic Claude"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://colab.research.google.com/github/microsoft/autogen/blob/main/website/docs/topics/non-openai-models/cloud-anthropic.ipynb",children:(0,o.jsx)(n.img,{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open In Colab"})}),"\n",(0,o.jsx)(n.a,{href:"https://github.com/microsoft/autogen/blob/main/website/docs/topics/non-openai-models/cloud-anthropic.ipynb",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/badge/Open%20on%20GitHub-grey?logo=github",alt:"Open on GitHub"})})]}),"\n",(0,o.jsx)(n.p,{children:"In the v0.2.30 release of AutoGen we support Anthropic Client."}),"\n",(0,o.jsx)(n.p,{children:"Claude is a family of large language models developed by Anthropic and\ndesigned to revolutionize the way you interact with AI. Claude excels at\na wide variety of tasks involving language, reasoning, analysis, coding,\nand more. The models are highly capable, easy to use, and can be\ncustomized to suit your needs."}),"\n",(0,o.jsx)(n.p,{children:"In this notebook, we demonstrate how to use Anthropic Claude model for\nAgentChat in AutoGen."}),"\n",(0,o.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,o.jsx)(n.p,{children:"Additionally, this client class provides support for function/tool\ncalling and will track token usage and cost correctly as per Anthropic\u2019s\nAPI costs (as of June 2024)."}),"\n",(0,o.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,o.jsxs)(n.p,{children:["To use Anthropic Claude with AutoGen, first you need to install the\n",(0,o.jsx)(n.code,{children:'pyautogen["anthropic]'})," package."]}),"\n",(0,o.jsxs)(n.p,{children:["To try out the function call feature of Claude model, you need to\ninstall ",(0,o.jsx)(n.code,{children:"anthropic>=0.23.1"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# !pip install pyautogen\n!pip install pyautogen["anthropic"]\n'})}),"\n",(0,o.jsx)(n.h2,{id:"set-the-config-for-the-anthropic-api",children:"Set the config for the Anthropic API"}),"\n",(0,o.jsx)(n.p,{children:"You can add any parameters that are needed for the custom model loading\nin the same configuration list."}),"\n",(0,o.jsxs)(n.p,{children:["It is important to add the ",(0,o.jsx)(n.code,{children:"api_type"})," field and set it to a string that\ncorresponds to the client type used: ",(0,o.jsx)(n.code,{children:"anthropic"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:'[\n    {\n        "model": "claude-3-sonnet-20240229",\n        "api_key": "your Anthropic API Key goes here",\n        "api_type": "anthropic",\n        "temperature": 0.5,\n        "top_p": 0.2, # Note: It is recommended to set temperature or top_p but not both.\n        "max_tokens": 10000,\n    },\n    {\n        "model":"claude-3-opus-20240229",\n        "api_key":"your api key",\n        "api_type":"anthropic",\n    },\n    {\n        "model":"claude-2.0",\n        "api_key":"your api key",\n        "api_type":"anthropic",\n    },\n    {\n        "model":"claude-2.1",\n        "api_key":"your api key",\n        "api_type":"anthropic",\n    },\n    {\n        "model":"claude-3.0-haiku",\n        "api_key":"your api key",\n        "api_type":"anthropic",\n    },\n]\n'})}),"\n",(0,o.jsx)(n.h3,{id:"alternative",children:"Alternative"}),"\n",(0,o.jsxs)(n.p,{children:["As an alternative to the api_key key and value in the config, you can\nset the environment variable ",(0,o.jsx)(n.code,{children:"ANTHROPIC_API_KEY"})," to your Anthropic API\nkey."]}),"\n",(0,o.jsx)(n.p,{children:"Linux/Mac:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:'export ANTHROPIC_API_KEY="your Anthropic API key here"\n'})}),"\n",(0,o.jsx)(n.p,{children:"Windows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"set ANTHROPIC_API_KEY=your_anthropic_api_key_here\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'import os\n\nfrom typing_extensions import Annotated\n\nimport autogen\n\nconfig_list_claude = [\n    {\n        # Choose your model name.\n        "model": "claude-3-sonnet-20240229",\n        # You need to provide your API key here.\n        "api_key": os.getenv("ANTHROPIC_API_KEY"),\n        "api_type": "anthropic",\n    }\n]\n'})}),"\n",(0,o.jsx)(n.h1,{id:"coding-example-with-two-agent",children:"Coding Example with Two Agent"}),"\n",(0,o.jsx)(n.h2,{id:"construct-agents",children:"Construct Agents"}),"\n",(0,o.jsx)(n.p,{children:"Construct a simple conversation between a User proxy and an\nConversableAgent based on Claude-3 model."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'assistant = autogen.AssistantAgent(\n    "assistant",\n    llm_config={\n        "config_list": config_list_claude,\n    },\n)\n\nuser_proxy = autogen.UserProxyAgent(\n    "user_proxy",\n    human_input_mode="NEVER",\n    code_execution_config={\n        "work_dir": "coding",\n        "use_docker": False,\n    },\n    is_termination_msg=lambda x: x.get("content", "") and x.get("content", "").rstrip().endswith("TERMINATE"),\n    max_consecutive_auto_reply=1,\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"initiate-chat",children:"Initiate Chat"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'user_proxy.initiate_chat(\n    assistant, message="Write a python program to print the first 10 numbers of the Fibonacci sequence."\n)\n'})}),"\n",(0,o.jsx)(n.h1,{id:"function-call-in-latest-anthropic-api",children:"Function Call in Latest Anthropic API"}),"\n",(0,o.jsxs)(n.p,{children:["Anthropic just announced that tool use is now supported in the Anthropic\nAPI. To use this feature, please install ",(0,o.jsx)(n.code,{children:"anthropic>=0.23.1"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"register-the-function",children:"Register the function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'@user_proxy.register_for_execution()  # Decorator factory for registering a function to be executed by an agent\n@assistant.register_for_llm(\n    name="get_weather", description="Get the current weather in a given location."\n)  # Decorator factory for registering a function to be used by an agent\ndef preprocess(location: Annotated[str, "The city and state, e.g. Toronto, ON."]) -> str:\n    return "Absolutely cloudy and rainy"\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'user_proxy.initiate_chat(\n    assistant,\n    message="What\'s the weather in Toronto?",\n)\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var o=t(67294);const i={},a=o.createContext(i);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);